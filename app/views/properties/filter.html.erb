<div class="modal-content p-6">
  <h2 class="text-lg font-semibold mb-4 text-center">Filter Properties</h2>
  
  <%= form_with url: properties_path, method: :get, data: { turbo_frame: "properties" } do |f| %>

  <!-- try with this: https://www.youtube.com/watch?v=NCy_tav8CEA or this: https://www.youtube.com/watch?v=X9ooIi9A4A8 -->
  
    <!-- Price Range -->

    <div class="range-container">
      <div class="double-slider">
        <div class="double-slider__body">
          <div class="double-slider__track">
            <div id="slider-range" class="double-slider__range"></div>
            <div id="dot-left" class="double-slider__dot double-slider__dot--left"></div>
            <div id="dot-right" class="double-slider__dot double-slider__dot--right"></div>
          </div>
          <input id="input-left" min="0" max="3000000" value="0" type="range" class="double-slider__input" />
          <input id="input-right" min="0" max="3000000" value="3000000" type="range" class="double-slider__input" />
        </div>
      </div>
    </div>

    <!-- Price Range -->
    <div class="mb-4">
      <h3 class="text-md font-medium mb-2">Price Range</h3>
      <div class="flex space-x-2">
        <%= f.number_field :min_sale_price,
        id: "min-sale-price",
        placeholder: "Min Price",
        oninput: "this.form.requestSubmit();",
        onchange: "this.form.requestSubmit();",
        class: "w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
        <%= f.number_field :max_sale_price,
        id: "max-sale-price",
        placeholder: "Max Price",
        oninput: "this.form.requestSubmit();",
        onchange: "this.form.requestSubmit();",
        class: "w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
      </div>
    </div>

    <!-- Bedrooms -->
    <div class="mb-4">
      <%= f.label :bedroom_count, "Bedrooms", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= f.select :bedroom_count, options_for_select([["Any", ""], 1, 2, 3, 4, ["5+", 5]]), {}, { onchange: "this.form.requestSubmit();", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" } %>
    </div>

    <!-- Bathrooms -->
    <div class="mb-4">
      <%= f.label :bathroom_count, "Bathrooms", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= f.select :bathroom_count, options_for_select([["Any", ""], 1, 2, 3, ["4+", 4]]), {}, { onchange: "this.form.requestSubmit();", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" } %>
    </div>

    <!-- Carpark Spaces -->
    <div class="mb-4">
      <%= f.label :carpark_spaces_count, "Carpark Spaces", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= f.select :carpark_spaces_count, options_for_select([["Any", ""], 1, 2, 3, ["4+", 4]]), {}, { onchange: "this.form.requestSubmit();", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" } %>
    </div>

    <!-- Floor Area Range -->
    <div class="mb-4">
      <h3 class="text-md font-medium mb-2">Floor Area (sqm)</h3>
      <div class="flex space-x-2">
        <%= f.number_field :min_floor_area, placeholder: "Min Area", oninput: "this.form.requestSubmit();", class: "w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
        <%= f.number_field :max_floor_area, placeholder: "Max Area", oninput: "this.form.requestSubmit();", class: "w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
      </div>
    </div>

    <!-- Land Area Range -->
    <div class="mb-4">
      <h3 class="text-md font-medium mb-2">Land Area (sqm)</h3>
      <div class="flex space-x-2">
        <%= f.number_field :min_land_area, placeholder: "Min Area", oninput: "this.form.requestSubmit();", class: "w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
        <%= f.number_field :max_land_area, placeholder: "Max Area", oninput: "this.form.requestSubmit();", class: "w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
      </div>
    </div>

    <!-- Suburb -->
    <div class="mb-4">
      <%= f.label :suburb, "Suburb", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= f.text_field :suburb, placeholder: "Enter suburb", oninput: "this.form.requestSubmit();", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
    </div>

    <!-- Decade Built -->
    <div class="mb-4">
      <%= f.label :decade_built, "Decade Built", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= f.select :decade_built, options_for_select([["Any", ""], "1950s", "1960s", "1970s", "1980s", "1990s", "2000s", "2010s", "2020s"]), {}, { onchange: "this.form.requestSubmit();", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" } %>
    </div>

    <!-- Property Condition -->
    <div class="mb-4">
      <%= f.label :condition, "Property Condition", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= f.select :condition, options_for_select([["Any", ""], "Excellent", "Good", "Fair", "Poor"]), {}, { onchange: "this.form.requestSubmit();", class: "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" } %>
    </div>

    <!-- Submit button 
    <div class="mt-6">
      <%= f.submit "Apply Filters", 
          class: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:w-auto sm:text-sm",
          data: { action: "filter#apply" } 
      %>
    </div> -->
  <% end %>
</div>

<script>
  var inputLeft = document.getElementById('input-left');
  var inputRight = document.getElementById('input-right');
  
  var dotLeft = document.getElementById('dot-left');
  var dotRight = document.getElementById('dot-right');

  var sliderRange = document.getElementById('slider-range');

  var minSalePrice = document.getElementById('min-sale-price');
  var maxSalePrice = document.getElementById('max-sale-price');

  function setLeftValue() {
    let value = Math.min(parseInt(this.value), parseInt(inputRight.value) - 1);
    let min = parseInt(this.min);
    let max = parseInt(this.max);

    let percent = ((value - min) / (max - min)) * 100;

    sliderRange.style.left = percent + '%';
    dotLeft.style.left = percent + '%';
    minSalePrice.value = value;
    inputLeft.value = value;
  }

  function setRightValue() {
    let value = Math.max(parseInt(this.value), parseInt(inputLeft.value) + 1);
    let min = parseInt(this.min);
    let max = parseInt(this.max);

    let percent = ((value - min) / (max - min)) * 100;

    sliderRange.style.right = (100 - percent) + '%';
    dotRight.style.right = (100 - percent) + '%';
    maxSalePrice.value = value;
    inputRight.value = value;
  }

  function updateSlider(input, isLeft) {
    let value = parseInt(input.value);
    let min = parseInt(inputLeft.min);
    let max = parseInt(inputRight.max);

    if (isNaN(value)) {
      value = isLeft ? min : max;
    }

    value = Math.min(Math.max(value, min), max);

    if (isLeft) {
      value = Math.min(value, parseInt(inputRight.value) - 1);
      inputLeft.value = value;
    } else {
      value = Math.max(value, parseInt(inputLeft.value) + 1);
      inputRight.value = value;
    }

    let percent = ((value - min) / (max - min)) * 100;

    if (isLeft) {
      sliderRange.style.left = percent + '%';
      dotLeft.style.left = percent + '%';
    } else {
      sliderRange.style.right = (100 - percent) + '%';
      dotRight.style.right = (100 - percent) + '%';
    }

    input.value = value;
  }

  inputLeft.addEventListener('input', setLeftValue);
  inputRight.addEventListener('input', setRightValue);

  // Add these new event listeners
  inputLeft.addEventListener('change', function() {
    this.form.requestSubmit();
  });
  inputRight.addEventListener('change', function() {
    this.form.requestSubmit();
  });

  minSalePrice.addEventListener('input', function() {
    updateSlider(this, true);
  });

  maxSalePrice.addEventListener('input', function() {
    updateSlider(this, false);
  });

  // Initialize the slider
  setLeftValue.call(inputLeft);
  setRightValue.call(inputRight);
</script>